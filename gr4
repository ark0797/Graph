import matplotlib.pyplot as plt
import networkx as nx
G=nx.Graph()
G.add_edge('1','2')
G.add_edge('2','3')
G.add_edge('3','4')
G.add_edge('4','9')
G.add_edge('1','8')
G.add_edge('2','8')
G.add_edge('3','8')
G.add_edge('7','8')
G.add_edge('4','7')
G.add_edge('5','7')
G.add_edge('5','6')

def deikstra(G,start):
    shortest_path={vertex:float('+inf') for vertex in G}
    shortest_path[start]=0
    gueue=[start]
    while len(gueue)!=0:
        current=queue.pop(0)
        print(current, shortest_path[current])
        for neighbour in G[current]:
            offering_shortest_path=shortest_path[current]+G[current][neighbour]
            if offering_shortest_path < shortest_path[neighbour]:
                shortest_path[neighbour]=offering_shortest_path
                gueue.append(neighbour)
    return shortest_path
